package com.csye6225.spring2018.controller;

import com.csye6225.spring2018.BCrypt;
import com.csye6225.spring2018.Repo.UserRepository;
import com.csye6225.spring2018.entity.User;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Profile;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import javax.servlet.http.HttpServletRequest;
import java.io.File;
import java.sql.SQLException;
import java.util.Date;

@Profile("dev")
@Controller
public class IndexControllerforLocal {

    private final static Logger logger = LoggerFactory.getLogger(IndexControllerforLocal.class);
    @Autowired
    // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;


    @RequestMapping("/")
    public String index() {
        logger.info("Loading home page.");
        return "index";
    }



    @RequestMapping("/signUp")
    public String sign(){
        logger.info("Loading signUp page.");
        return "signup";

    }

    @PostMapping("/success")
    public String addNewUser (HttpServletRequest request) {
        logger.info("Loading success page.");
        String username = request.getParameter("username");
        String password = request.getParameter("password");
        User existingUser = userRepository.findByUsername(username);
        if(existingUser == null){
            User n = new User();
            n.setUsername(username);
            String passwordS = BCrypt.hashpw(password, BCrypt.gensalt());
            n.setPassword(passwordS);
            userRepository.save(n);
            return "success";
        }else{
            return "exist";
        }
    }


    @RequestMapping("/login")
    public String login(HttpServletRequest request, Model model) throws SQLException {
        logger.info("Loading login page.");
        String username = request.getParameter("username");
        String password = request.getParameter("password");

        User existingUser = userRepository.findByUsername(username);
        if (existingUser == null) {
            return "false";
        } else {
            if (BCrypt.checkpw(password, existingUser.getPassword())) {
                File dir = new File(System.getProperty("user.home") + "/");
                File[] directoryListing = dir.listFiles();
                if (directoryListing != null) {
                    for (File eachFile : directoryListing) {

                        String picName = eachFile.getName();

                        int i = picName.lastIndexOf('.');
                        if (i == -1) {
                            continue;
                        }
                        String ownerName = picName.substring(0, i);
                        if (ownerName.isEmpty()) {
                            continue;
                        }
                        if (ownerName.equals(username)) {

                            String abPath = eachFile.getAbsolutePath();
                            System.out.println(abPath);
                            File todisplay = new File(abPath);
                            String tempUrl = abPath;
                            System.out.println(tempUrl);

                            if (todisplay.exists()) {
                                System.out.println("exist!");
                                model.addAttribute("picURL", tempUrl);
                            } else {
                                model.addAttribute("picURL", "http://via.placeholder.com/350x150");
                            }
                            break;
                        }
                    }
                }

                String content = existingUser.getAboutMe();
                model.addAttribute("time", new Date());
                model.addAttribute("username", username);
                model.addAttribute("content", content);

                return "loggedin";
            } else {
                return "false";
            }
        }
    }



    @RequestMapping("/logout")
    public String logout(){
        logger.info("Loading logout page.");
        return "index";
    }

    @RequestMapping("/backHome")
    public String backHome(){
        logger.info("Go back to home.");
        return "index";
    }
}
